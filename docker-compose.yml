version: '3.8'

services:
  # Banco de Dados PostgreSQL
  db:
    image: postgres:14-alpine
    container_name: noracond-postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: noracond-api
    env_file:
      - ./NoraCOND.API/.env.production
    environment:
      - DB_HOST=db
      - DB_PORT=5432
    ports:
      - "5000:8080"
    volumes:
      - uploads_data:/app/uploads
    networks:
      - noracond-network
    depends_on:
      db:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./noracond-frontend
      dockerfile: Dockerfile
    container_name: noracond-frontend
    ports:
      - "80:80"
    networks:
      - noracond-network
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (para cache futuro)
  redis:
    image: redis:7-alpine
    container_name: noracond-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - noracond-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local
  redis_data:
    driver: local

networks:
  noracond-network:
    driver: bridge