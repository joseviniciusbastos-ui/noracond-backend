using Microsoft.EntityFrameworkCore;
using NoraCOND.Infrastructure.Data;
using NoraCOND.Domain.Entities;
using BCrypt.Net;

// Configurar connection string
var connectionString = "Host=localhost;Port=5432;Database=noracond_dev;Username=postgres;Password=postgres";

// Configurar DbContext
var optionsBuilder = new DbContextOptionsBuilder<AppDbContext>();
optionsBuilder.UseNpgsql(connectionString);

using var context = new AppDbContext(optionsBuilder.Options);

try
{
    Console.WriteLine("üîç Procurando usu√°rio admin existente...");
    
    // Buscar e deletar usu√°rio admin existente
    var adminExistente = await context.Usuarios.FirstOrDefaultAsync(u => u.Email == "admin@noracond.com");

    if (adminExistente != null)
    {
        Console.WriteLine($"‚ùå Deletando usu√°rio admin existente (ID: {adminExistente.Id})");
        context.Usuarios.Remove(adminExistente);
        await context.SaveChangesAsync();
        Console.WriteLine("‚úÖ Usu√°rio admin deletado com sucesso!");
    }
    else
    {
        Console.WriteLine("‚ÑπÔ∏è Nenhum usu√°rio admin encontrado para deletar.");
    }

    Console.WriteLine("\nüîê Criando novo usu√°rio admin...");
    
    // Criar hash da senha usando BCrypt.Net-Next
    string senha = "admin123";
    string senhaHash = BCrypt.Net.BCrypt.HashPassword(senha, 11);
    
    Console.WriteLine($"üîë Senha: {senha}");
    Console.WriteLine($"üîí Hash gerado: {senhaHash}");
    
    // Testar o hash imediatamente
    bool testeHash = BCrypt.Net.BCrypt.Verify(senha, senhaHash);
    Console.WriteLine($"‚úÖ Teste do hash: {testeHash}");
    
    if (!testeHash)
    {
        Console.WriteLine("‚ùå ERRO: Hash n√£o passou no teste de verifica√ß√£o!");
        return;
    }

    // Criar novo usu√°rio admin
    var novoAdmin = new Usuario
    {
        Id = Guid.NewGuid(),
        Nome = "Administrador",
        Email = "admin@noracond.com",
        SenhaHash = senhaHash,
        Role = "Admin",
        DataCriacao = DateTime.UtcNow
    };

    // Adicionar ao banco
    context.Usuarios.Add(novoAdmin);
    await context.SaveChangesAsync();

    Console.WriteLine("\n‚úÖ Novo usu√°rio admin criado com sucesso!");
    Console.WriteLine($"üìß Email: {novoAdmin.Email}");
    Console.WriteLine($"üîë Senha: {senha}");
    Console.WriteLine($"üÜî ID: {novoAdmin.Id}");
    Console.WriteLine($"üë§ Role: {novoAdmin.Role}");
    
    // Verificar se foi salvo corretamente
    var verificacao = await context.Usuarios.FirstOrDefaultAsync(u => u.Email == "admin@noracond.com");
    if (verificacao != null)
    {
        Console.WriteLine("\nüîç Verifica√ß√£o no banco:");
        Console.WriteLine($"Hash salvo: {verificacao.SenhaHash}");
        bool verificacaoFinal = BCrypt.Net.BCrypt.Verify(senha, verificacao.SenhaHash);
        Console.WriteLine($"Verifica√ß√£o final: {verificacaoFinal}");
    }
}
catch (Exception ex)
{
    Console.WriteLine($"‚ùå Erro: {ex.Message}");
    Console.WriteLine($"Stack trace: {ex.StackTrace}");
}